services:
  api:
    build:
      context: .
      dockerfile: docker/api.Dockerfile
    deploy:
      replicas: 1
    depends_on:
      - db
      - kafka
    env_file: &env_files
      - .env.example
      - .env
    environment:
      APP__DB__HOST: db
    ports:
      - ${APP__API__PORT}:${APP__API__PORT}
    restart: on-failure
    entrypoint: |
      gunicorn -k uvicorn.workers.UvicornWorker
        --workers 4
        --threads 2
        --bind ${APP__API__HOST}:${APP__API__PORT}
        app.api.http_server:application

  db:
    image: postgres:14
    env_file:
      *env_files
    environment:
      POSTGRES_DB: ${APP__DB__NAME}
      POSTGRES_USER: ${APP__DB__USER}
      POSTGRES_PASSWORD: ${APP__DB__PASSWORD}
    ports:
      - "5435:5432"
    volumes:
      - pg-data:/var/lib/postgresql/data

  kafka:
    image: 'bitnami/kafka:3.9.0'
    ports:
      - "9092:9092"
      - "9094:9094"
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://localhost:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true  # only for testing
    volumes:
      - kafka-data:/bitnami/kafka

  kafdrop:
    image: obsidiandynamics/kafdrop:4.0.2
    depends_on:
      - kafka
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: "kafka:9092"
      JVM_OPTS: "-Xms64M -Xmx128M"

volumes:
  pg-data:
  kafka-data:
